// Code generated by protoc-gen-go. DO NOT EDIT.
// source: conn.proto

/*
Package conn is a generated protocol buffer package.

It is generated from these files:
	conn.proto

It has these top-level messages:
	DisconnectReq
	DisconnectResp
	NotifyReq
	NotifyResp
*/
package conn

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DisconnectReq struct {
	ClientID     string `protobuf:"bytes,1,opt,name=ClientID" json:"ClientID,omitempty"`
	ConnectionID int64  `protobuf:"varint,2,opt,name=ConnectionID" json:"ConnectionID,omitempty"`
	TraceID      string `protobuf:"bytes,3,opt,name=TraceID" json:"TraceID,omitempty"`
	Service      string `protobuf:"bytes,4,opt,name=Service" json:"Service,omitempty"`
}

func (m *DisconnectReq) Reset()                    { *m = DisconnectReq{} }
func (m *DisconnectReq) String() string            { return proto.CompactTextString(m) }
func (*DisconnectReq) ProtoMessage()               {}
func (*DisconnectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DisconnectReq) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

func (m *DisconnectReq) GetConnectionID() int64 {
	if m != nil {
		return m.ConnectionID
	}
	return 0
}

func (m *DisconnectReq) GetTraceID() string {
	if m != nil {
		return m.TraceID
	}
	return ""
}

func (m *DisconnectReq) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

type DisconnectResp struct {
}

func (m *DisconnectResp) Reset()                    { *m = DisconnectResp{} }
func (m *DisconnectResp) String() string            { return proto.CompactTextString(m) }
func (*DisconnectResp) ProtoMessage()               {}
func (*DisconnectResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type NotifyReq struct {
	Topic         string `protobuf:"bytes,1,opt,name=Topic" json:"Topic,omitempty"`
	Index         []byte `protobuf:"bytes,2,opt,name=Index,proto3" json:"Index,omitempty"`
	NoneDowngrade bool   `protobuf:"varint,3,opt,name=NoneDowngrade" json:"NoneDowngrade,omitempty"`
	TraceID       string `protobuf:"bytes,4,opt,name=TraceID" json:"TraceID,omitempty"`
	Service       string `protobuf:"bytes,5,opt,name=Service" json:"Service,omitempty"`
}

func (m *NotifyReq) Reset()                    { *m = NotifyReq{} }
func (m *NotifyReq) String() string            { return proto.CompactTextString(m) }
func (*NotifyReq) ProtoMessage()               {}
func (*NotifyReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *NotifyReq) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *NotifyReq) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *NotifyReq) GetNoneDowngrade() bool {
	if m != nil {
		return m.NoneDowngrade
	}
	return false
}

func (m *NotifyReq) GetTraceID() string {
	if m != nil {
		return m.TraceID
	}
	return ""
}

func (m *NotifyReq) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

type NotifyResp struct {
}

func (m *NotifyResp) Reset()                    { *m = NotifyResp{} }
func (m *NotifyResp) String() string            { return proto.CompactTextString(m) }
func (*NotifyResp) ProtoMessage()               {}
func (*NotifyResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*DisconnectReq)(nil), "conn.DisconnectReq")
	proto.RegisterType((*DisconnectResp)(nil), "conn.DisconnectResp")
	proto.RegisterType((*NotifyReq)(nil), "conn.NotifyReq")
	proto.RegisterType((*NotifyResp)(nil), "conn.NotifyResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ConnService service

type ConnServiceClient interface {
	Disconnect(ctx context.Context, in *DisconnectReq, opts ...grpc.CallOption) (*DisconnectResp, error)
	Notify(ctx context.Context, in *NotifyReq, opts ...grpc.CallOption) (*NotifyResp, error)
}

type connServiceClient struct {
	cc *grpc.ClientConn
}

func NewConnServiceClient(cc *grpc.ClientConn) ConnServiceClient {
	return &connServiceClient{cc}
}

func (c *connServiceClient) Disconnect(ctx context.Context, in *DisconnectReq, opts ...grpc.CallOption) (*DisconnectResp, error) {
	out := new(DisconnectResp)
	err := grpc.Invoke(ctx, "/conn.ConnService/Disconnect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connServiceClient) Notify(ctx context.Context, in *NotifyReq, opts ...grpc.CallOption) (*NotifyResp, error) {
	out := new(NotifyResp)
	err := grpc.Invoke(ctx, "/conn.ConnService/Notify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConnService service

type ConnServiceServer interface {
	Disconnect(context.Context, *DisconnectReq) (*DisconnectResp, error)
	Notify(context.Context, *NotifyReq) (*NotifyResp, error)
}

func RegisterConnServiceServer(s *grpc.Server, srv ConnServiceServer) {
	s.RegisterService(&_ConnService_serviceDesc, srv)
}

func _ConnService_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnServiceServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conn.ConnService/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnServiceServer).Disconnect(ctx, req.(*DisconnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnService_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnServiceServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conn.ConnService/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnServiceServer).Notify(ctx, req.(*NotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConnService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "conn.ConnService",
	HandlerType: (*ConnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Disconnect",
			Handler:    _ConnService_Disconnect_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _ConnService_Notify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "conn.proto",
}

func init() { proto.RegisterFile("conn.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x91, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x09, 0x4d, 0x4b, 0x7b, 0xa4, 0x50, 0x1d, 0x1d, 0xac, 0x4c, 0x95, 0xc5, 0xd0, 0x85,
	0x0e, 0x30, 0x31, 0xd7, 0x4b, 0x96, 0x0e, 0xa6, 0x7f, 0xa0, 0xb8, 0x07, 0xb2, 0x84, 0x6c, 0x93,
	0x44, 0x14, 0x66, 0x7e, 0x01, 0xff, 0x18, 0xd9, 0x4e, 0x4b, 0x2d, 0xd4, 0xed, 0xde, 0xbb, 0x97,
	0xe8, 0x7b, 0x67, 0x00, 0x65, 0x8d, 0x59, 0xb8, 0xda, 0xb6, 0x16, 0x73, 0x3f, 0xf3, 0xef, 0x0c,
	0xc6, 0x42, 0x37, 0x7e, 0x26, 0xd5, 0x4a, 0x7a, 0xc7, 0x12, 0x86, 0xcb, 0x37, 0x4d, 0xa6, 0xad,
	0x04, 0xcb, 0x66, 0xd9, 0x7c, 0x24, 0x0f, 0x1a, 0x39, 0x14, 0xcb, 0x98, 0xd4, 0xd6, 0x54, 0x82,
	0x9d, 0xcf, 0xb2, 0x79, 0x4f, 0x26, 0x1e, 0x32, 0xb8, 0x58, 0xd7, 0x1b, 0x45, 0x95, 0x60, 0xbd,
	0xf0, 0xf9, 0x5e, 0xfa, 0xcd, 0x13, 0xd5, 0x1f, 0x5a, 0x11, 0xcb, 0xe3, 0xa6, 0x93, 0x7c, 0x02,
	0x57, 0xc7, 0x10, 0x8d, 0xe3, 0x3f, 0x19, 0x8c, 0x56, 0xb6, 0xd5, 0x2f, 0x5f, 0x9e, 0x69, 0x0a,
	0xfd, 0xb5, 0x75, 0x5a, 0x75, 0x40, 0x51, 0x78, 0xb7, 0x32, 0x5b, 0xfa, 0x0c, 0x18, 0x85, 0x8c,
	0x02, 0x6f, 0x61, 0xbc, 0xb2, 0x86, 0x84, 0xdd, 0x99, 0xd7, 0x7a, 0xb3, 0xa5, 0x40, 0x31, 0x94,
	0xa9, 0x79, 0x4c, 0x99, 0x9f, 0xa4, 0xec, 0xa7, 0x94, 0x05, 0xc0, 0x1e, 0xa9, 0x71, 0xf7, 0x3b,
	0xb8, 0xf4, 0xbd, 0xbb, 0x25, 0x3e, 0x02, 0xfc, 0x55, 0xc0, 0x9b, 0x45, 0xb8, 0x74, 0x72, 0xd9,
	0x72, 0xfa, 0xdf, 0x6c, 0x1c, 0x3f, 0xc3, 0x3b, 0x18, 0xc4, 0xff, 0xe2, 0x75, 0x4c, 0x1c, 0x8a,
	0x97, 0x93, 0xd4, 0xf0, 0xf1, 0xe7, 0x41, 0x78, 0xbf, 0x87, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x2b, 0x60, 0xa7, 0xc9, 0xcd, 0x01, 0x00, 0x00,
}
