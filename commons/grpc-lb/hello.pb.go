// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hello.proto

package lb

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SayReq struct {
	Content              string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SayReq) Reset()         { *m = SayReq{} }
func (m *SayReq) String() string { return proto.CompactTextString(m) }
func (*SayReq) ProtoMessage()    {}
func (*SayReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_61ef911816e0a8ce, []int{0}
}

func (m *SayReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SayReq.Unmarshal(m, b)
}
func (m *SayReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SayReq.Marshal(b, m, deterministic)
}
func (m *SayReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SayReq.Merge(m, src)
}
func (m *SayReq) XXX_Size() int {
	return xxx_messageInfo_SayReq.Size(m)
}
func (m *SayReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SayReq.DiscardUnknown(m)
}

var xxx_messageInfo_SayReq proto.InternalMessageInfo

func (m *SayReq) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type SayResp struct {
	Content              string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SayResp) Reset()         { *m = SayResp{} }
func (m *SayResp) String() string { return proto.CompactTextString(m) }
func (*SayResp) ProtoMessage()    {}
func (*SayResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_61ef911816e0a8ce, []int{1}
}

func (m *SayResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SayResp.Unmarshal(m, b)
}
func (m *SayResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SayResp.Marshal(b, m, deterministic)
}
func (m *SayResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SayResp.Merge(m, src)
}
func (m *SayResp) XXX_Size() int {
	return xxx_messageInfo_SayResp.Size(m)
}
func (m *SayResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SayResp.DiscardUnknown(m)
}

var xxx_messageInfo_SayResp proto.InternalMessageInfo

func (m *SayResp) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func init() {
	proto.RegisterType((*SayReq)(nil), "lb.SayReq")
	proto.RegisterType((*SayResp)(nil), "lb.SayResp")
}

func init() { proto.RegisterFile("hello.proto", fileDescriptor_61ef911816e0a8ce) }

var fileDescriptor_61ef911816e0a8ce = []byte{
	// 117 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x48, 0xcd, 0xc9,
	0xc9, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xca, 0x49, 0x52, 0x52, 0xe2, 0x62, 0x0b,
	0x4e, 0xac, 0x0c, 0x4a, 0x2d, 0x14, 0x92, 0xe0, 0x62, 0x4f, 0xce, 0xcf, 0x2b, 0x49, 0xcd, 0x2b,
	0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x71, 0x95, 0x94, 0xb9, 0xd8, 0xc1, 0x6a, 0x8a,
	0x0b, 0x70, 0x2b, 0x32, 0xd2, 0xe0, 0x62, 0x09, 0x49, 0x2d, 0x2e, 0x11, 0x52, 0xe0, 0x62, 0x0e,
	0x4e, 0xac, 0x14, 0xe2, 0xd2, 0xcb, 0x49, 0xd2, 0x83, 0x98, 0x2c, 0xc5, 0x0d, 0x67, 0x17, 0x17,
	0x28, 0x31, 0x24, 0xb1, 0x81, 0x6d, 0x37, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x5f, 0x14, 0xd8,
	0xc1, 0x8c, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestClient is the client API for Test service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestClient interface {
	Say(ctx context.Context, in *SayReq, opts ...grpc.CallOption) (*SayResp, error)
}

type testClient struct {
	cc *grpc.ClientConn
}

func NewTestClient(cc *grpc.ClientConn) TestClient {
	return &testClient{cc}
}

func (c *testClient) Say(ctx context.Context, in *SayReq, opts ...grpc.CallOption) (*SayResp, error) {
	out := new(SayResp)
	err := c.cc.Invoke(ctx, "/lb.Test/Say", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServer is the server API for Test service.
type TestServer interface {
	Say(context.Context, *SayReq) (*SayResp, error)
}

// UnimplementedTestServer can be embedded to have forward compatible implementations.
type UnimplementedTestServer struct {
}

func (*UnimplementedTestServer) Say(ctx context.Context, req *SayReq) (*SayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Say not implemented")
}

func RegisterTestServer(s *grpc.Server, srv TestServer) {
	s.RegisterService(&_Test_serviceDesc, srv)
}

func _Test_Say_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).Say(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lb.Test/Say",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).Say(ctx, req.(*SayReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Test_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lb.Test",
	HandlerType: (*TestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Say",
			Handler:    _Test_Say_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hello.proto",
}
